pred=predict(fit,x)
train.err=mean(y!=pred)
train.err
plot(x,col=y+3,pch=19)
xtest=matrix(rnorm(10000),1000,10)
ytest=rep(c(-1,1),c(500,500))
xtest[ytest==1,1:5]=xtest[ytest==1,1:5]+1
predtest=predict(fit,xtest)
test.err=mean(ytest!=predtest)
test.err
ytest=ytest+1
ytest=ytest/2
xtest[ytest==1,1:5]=xtest[ytest==1,1:5]+1
predtest=predict(fit,xtest)
test.err=mean(ytest!=predtest)
test.err
set.seed(10111)
x=matrix(rnorm(1000),100,10)
y=rep(c(-1,1),c(50,50))
y=y+1
y=y/2
x[y==1,1:5]=x[y==1,1:5]+1
library(e1071)
dat=data.frame(x,y=as.factor(y))
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial")
pred=predict(fit,x)
train.err=mean(y!=pred)
train.err
plot(x,col=y+3,pch=19)
xtest=matrix(rnorm(10000),1000,10)
ytest=rep(c(-1,1),c(500,500))
ytest=ytest+1
ytest=ytest/2
xtest[ytest==1,1:5]=xtest[ytest==1,1:5]+1
predtest=predict(fit,xtest)
test.err=mean(ytest!=predtest)
test.err
fit2=svm(factor(y)~.,data=dat,scale=FALSE,kernel="linear")
pred2=predict(fit2,x)
train.err2=mean(y!=pred2)
train.err2
predtest2=predict(fit2,xtest)
test.err2=mean(ytest!=predtest2)
test.err2
#y=y+1
#y=y/2
dat=data.frame(x,y=as.factor(y))
fit3=glm(factor(y)~.,data=dat,family=binomial)
pred3=predict(fit3,data=x)
train.err3=mean(y!=(pred3>0))
train.err3
#ytest=ytest+1
#ytest=ytest/2
predtest3=predict(fit3,data.frame(xtest))
test.err3=mean(ytest!=(predtest3>0))
test.err3
set.seed(10111)
x=matrix(rnorm(1000),100,10)
y=rep(c(-1,1),c(50,50))
y=y+1
y=y/2
x=matrix(rnorm(1000),100,10)
y=rep(c(0,1),c(50,50))
y
y=rep(c(-1,1),c(50,50))
y
y=y+1
y=y/2
y
set.seed(10111)
x=matrix(rnorm(1000),100,10)
y=rep(c(0,1),c(50,50))
x[y==1,1:5]=x[y==1,1:5]+1
library(e1071)
dat=data.frame(x,y=as.factor(y))
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial")
pred=predict(fit,x)
train.err=mean(y!=pred)
train.err
plot(x,col=y+3,pch=19)
xtest=matrix(rnorm(10000),1000,10)
ytest=rep(c(0,1),c(500,500))
xtest[ytest==1,1:5]=xtest[ytest==1,1:5]+1
predtest=predict(fit,xtest)
test.err=mean(ytest!=predtest)
test.err
View(x)
y
load("R/7.R.RData")
plot(x,y)
fit=lm(y~x)
fit
fit2=lm(y~x+I(x^2))
fit2
xlims=range(x)
x.grid=seq(from=xlims[1],to=xlims[2])
preds=predict(fit,newdata=list(x=x.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)
lines(x.grid,preds$fit,lwd=2,col="blue")
preds=predict(fit2,newdata=list(x=x.grid),se=TRUE)
se.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)
lines(x.grid,preds$fit,lwd=2,col="red")
?replicate
set.seed(10111)
x=matrix(rnorm(1000),100,10)
y=rep(c(0,1),c(50,50))
x[y==1,1:5]=x[y==1,1:5]+1
library(e1071)
dat=data.frame(x,y=as.factor(y))
fit=svm(factor(y)~.,data=dat,scale=FALSE,kernel="radial")
pred=predict(fit,x)
train.err=mean(y!=pred)
train.err
plot(x,col=y+3,pch=19)
xtest=matrix(rnorm(10000),1000,10)
ytest=rep(c(0,1),c(500,500))
xtest[ytest==1,1:5]=xtest[ytest==1,1:5]+1
predtest=predict(fit,xtest)
test.err=mean(ytest!=predtest)
test.err
fit2=svm(factor(y)~.,data=dat,scale=FALSE,kernel="linear")
pred2=predict(fit2,x)
train.err2=mean(y!=pred2)
train.err2
predtest2=predict(fit2,xtest)
test.err2=mean(ytest!=predtest2)
test.err2
dat=data.frame(x,y=as.factor(y))
fit3=glm(factor(y)~.,data=dat,family=binomial)
pred3=predict(fit3,data=x)
train.err3=mean(y!=(pred3>0))
train.err3
predtest3=predict(fit3,data.frame(xtest))
test.err3=mean(ytest!=(predtest3>0))
test.err3
?c
?m
c(1,7:9)
c(1,2,3,5,6,8)
a=c(1,2,3)
a
a[1,]=c(1,2,3)
?matrix
a
b=3
b
b<-3
b
b<-4
b
b=matrix(c(1,2,3,4,5,6),nrow=2)
b
a
b
a*b
a%*%b
dim(a)
dim(b)
b%*%a''
b%*%a
b
a
sum(a)
cumsum(a)
cumsum(b)
set.seed (2)
x=matrix (rnorm (50*2) , ncol =2)
x[1:25 ,1]=x[1:25 ,1]+3
x[1:25 ,2]=x[1:25 ,2] -4
km.out =kmeans (x,2, nstart =20)
km.out$cluster
plot(x, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=2", xlab ="", ylab="", pch =20, cex =2)
?kmeans
set.seed (4)
km.out =kmeans (x,3, nstart =20)
km.out
plot(x, col =(km.out$cluster +1) , main="K-Means Clustering
Results with K=3", xlab ="", ylab="", pch =20, cex =2)
?dist
b
a
a=c(1,2,3)
b=matrix(c(1,2,3,4,5,6),nrow=2)
b
a
dist(b)
dim(dist(b))
c=dist(b)
c
summary(c)
c
b
names(b)
x
dist(x)
x.dist=dist(X)
x.dist=dist(x)
summary(x)
x
x.dist
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?seq_along
x
?seq_along(x)
seq_along(x)
a=c(1,2,3)
seq_along(a)
for (i in a) print(i)
for (i in seq_along(a) print(i)
for (i in seq_along(a)) print(i)
seq_length(a)
seq_len(a)
a
a.len
a.length
names(a)
dim(a)
size(a)
length(a)
?sapply
?unclass
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
create = h5createFile("example.h5")
create = h5createGroup("example.h5","foo")
h5ls("example.h5")
A = matrix(1:20,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
h5ls("example.h5")
getwd()
A
readA = h5read("example.h5","foo/A")
readA
library(datasets)
data(iris)
?iris
?data
?iris
head(iris)
class(iris)
iris[iris$Species=="virginica"]
iris[iris$species=="virginica"]
iris[iris$species=="virginica",]
iris
iris[iris$species=="virginica",]
iris$species
iris$Species
iris[iris$Species=="virginica",]
data <- iris[iris$Species=="virginica",];
head(data)
data$Sepal.Length
mean(data$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?split
sapply(mtcars, cyl, mean)
?mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
hp_cyl <- sapply(split(mtcars$hp, mtcars$cyl), mean)
hp_cyl
hp_cyl$4
hp_cyl$"4"
hp_cyl$[4]
class(hp_cyl)
names(hp_cyl)
hp_cyl[1]-hp_cyl[3]
abs(hp_cyl[1]-hp_cyl[3])
?ls
ls()
debug(ls)
ls()
q
q
?
q
exit
quit
quit
debug
ls
?debug
a
ls
undebug(ls)
ls
isdebugged(ls)
hp_cyl
hp_cyl
iris
tapply(iris$Sepal.Length,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
mean(data$Sepal.Length)
tapply(iris$Sepal.Length,iris$Species,mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1,2,3,4)
x$cachemean()
x$getmean
x$getmean()
cachemean(x)
class(x)
makevector(x)
makeVector(x)
mean(x)
cachemean(x)
makeVector(x)
x
makeVector(c(2,3,4,5))
makeVector(x(set)
)
getwd()
a
a = c(4,5,6)
?nlme
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?par
?print.trellis
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes))
print(g)
library(ggplot2)
g <- ggplot(movies)
print(g)
head(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
data(mtcars)
fit1 <- lm(mpg~am,data=mtcars)
summary(fit1)
fit1 <- lm(mpg~wt,data=mtcars)
summary(fit1)
fit1 <- lm(mpg~cyl,data=mtcars)
summary(fit1)
fit1 <- lm(mpg~cyl-1,data=mtcars)
summary(fit1)
fit1 <- lm(mpg~cyl+0,data=mtcars)
summary(fit1)
rm(list=())
rm(list=ls())
setwd("~/Downloads/Data Science/8. Practical Machine Learning  Coursera/Quiz/project-1")
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
library(caret)
folds <- createFolds(y=training$classe,k=10,list=FALSE)
training_trainset <- training[folds!=10,]
training_testset <- training[folds==10,]
trainset_len <- dim(training_trainset)[1]
trainset_len
testset_len <- dim(training_testset)[1]
testset_len/10
round(testset_len/10)
trainset_len <- round(dim(training_trainset)[1]/100)
testset_len <- round(dim(training_testset)[1]/100)
training_trainset_predictor <- training_trainset[1:trainset_len,c(8:12,160)]
training_testset_predictor <- training_testset[1:testset_len,c(8:12,160)]
testing_predictor <- testing[,c(8:12,160)]
str(training_trainset_predictor)
str(training_testset_predictor)
View(training_testset_predictor)
training_trainset_predictor <- transform(training_trainset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt))
training_testset_predictor <- transform(training_testset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt))
testing_predictor <- transform(testing_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt))
View(training_testset_predictor)
str(training_testset_predictor)
?read.csv
rm(list=ls())
training <- read.csv("pml-training.csv",stringsAsFactors=FALSE)
testing <- read.csv("pml-testing.csv",stringsAsFactors=FALSE)
folds <- createFolds(y=training$classe,k=10,list=FALSE)
training_trainset <- training[folds!=10,]
training_testset <- training[folds==10,]
trainset_len <- round(dim(training_trainset)[1]/100)
testset_len <- round(dim(training_testset)[1]/100)
str(training_trainset)
training_trainset_predictor <- training_trainset[1:trainset_len,c(8:12,160)]
training_testset_predictor <- training_testset[1:testset_len,c(8:12,160)]
str(training_trainset_predictor)
testing_predictor <- testing[,c(8:12,160)]
View(testing)
View(training_testset_predictor)
?as.factor
?transform
training_trainset_predictor <- transform(training_trainset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt),classe=as.factor(classe))
training_testset_predictor <- transform(training_testset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt),classe=as.factor(classe))
str(training_trainset_predictor)
str(training_testset_predictor)
View(training_testset_predictor)
inTrain <- createDataPartition(y=training_trainset$classe,p=0.01,list=FALSE)
inTest <- createDataPartition(y=training_testset$classe,p=0.01,list=FALSE)
training_trainset_predictor <- training_trainset[inTrain,c(8:12,160)]
training_testset_predictor <- training_testset[inTest,c(8:12,160)]
testing_predictor <- testing[,c(8:12,160)]
View(training_testset_predictor)
View(training_trainset_predictor)
str(training_trainset_predictor)
training_trainset_predictor <- transform(training_trainset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt),classe=as.factor(classe))
str(training_trainset_predictor)
training_testset_predictor <- transform(training_testset_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt),classe=as.factor(classe))
str(training_testset_predictor)
testing_predictor <- transform(testing_predictor,kurtosis_roll_belt=as.numeric(kurtosis_roll_belt))
str(testing_predictor)
set.seed(123)
modelFit <- train(classe~.,method="rpart",data=training_trainset_predictor)
View(training_trainset_predictor)
View(training_testset_predictor)
View(testing_predictor)
print(modelFit$finalModel)
View(testing)
View(testing_predictor)
training_trainset_predictor <- training_trainset[inTrain,c(8:11,160)]
training_testset_predictor <- training_testset[inTest,c(8:11,160)]
testing_predictor <- testing[,c(8:11,160)]
training_trainset_predictor <- transform(training_trainset_predictor,classe=as.factor(classe))
str(training_trainset_predictor)
str(training_testset_predictor)
training_testset_predictor <- transform(training_testset_predictor,classe=as.factor(classe))
set.seed(123)
modelFit <- train(classe~.,method="rpart",data=training_trainset_predictor)
print(modelFit$finalModel)
y1 <- predict(modelFit,newdata=training_trainset_predictor)
table(y1==training_trainset_predictor$classe)
table(y1==training_trainset_predictor$classe)[2]/sum(table(y1==training_trainset_predictor$classe))
table(training_trainset_predictor$classe)
table(y1)
y2 <- predict(modelFit,newdata=training_testset_predictor)
table(y2==training_testset_predictor$classe)
table(y2==training_testset_predictor$classe)[2]/sum(table(y2==training_testset_predictor$classe))
table(training_testset_predictor$classe)
table(y2)
y3 <- predict(modelFit,newdata=testing_predictor)
y3
rm(list=ls())
?ser.seed
?set.seed
